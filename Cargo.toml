[package]
name = "dson"
version = "0.1.1"
edition = "2024"
license = "MIT OR Apache-2.0"

repository = "https://github.com/helsing-ai/dson"
homepage = "https://github.com/helsing-ai/dson"
documentation = "https://docs.rs/dson"
description = "A delta-state CRDT implementation"
readme = "README.md"
keywords = ["crdt", "delta-state", "distributed", "concurrency", "peer-to-peer"]
categories = ["data-structures", "concurrency"]

[features]
default = ["json", "chrono", "ulid"]
## Implements `quickcheck::Arbitrary` for CRDT types, useful for property-based testing.
arbitrary = ["bimap", "quickcheck", "rand", "dep:chrono"]
## Enables serialization and deserialization of DSON CRDTs to and from `serde_json::Value`.
json = ["serde", "dep:base64", "dep:serde_bytes", "dep:serde_json"]
## Provides `serde` support for all CRDT types.
serde = ["dep:serde", "dep:serde_bytes", "smallvec/serde", "ulid/serde"]
## Enables `chrono` support for `Timestamp`.
chrono = ["dep:chrono"]
## Enables registers to hold ulids.
ulid = ["dep:ulid"]

[dependencies]
ahash = "0.8.11"
base64 = { version = "0.22.1", optional = true }
bimap = { version = "0.6.3", optional = true }
chrono = { version = "0.4.40", optional = true }
quickcheck = { version = "1.0.3", optional = true }
rand = { version = "0.9.0", optional = true }
serde = { version = "1.0.219", optional = true, features = ["derive"] }
serde_bytes = { version = "0.11.17", optional = true }
serde_json = { version = "1.0.140", optional = true }
smallvec = "1.14.0"
ulid = { version = "1.2.0", optional = true }

[dev-dependencies]
bimap = "0.6.3"
iai-callgrind = "0.14.0"
insta = "1.43.1"
quickcheck = "1.0.3"
quickcheck_macros = "1.0.0"
rand = "0.9.0"
tango-bench = "0.6"
tracing-subscriber = { version = "0.3.19", features = ["env-filter"] }

[build-dependencies]
rand = "0.9.0"
rand_distr = "0.5.1"

[[bench]]
harness = false
name = "tango"

[[bench]]
harness = false
name = "iai"
